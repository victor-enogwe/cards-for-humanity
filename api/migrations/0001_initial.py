# Generated by Django 2.2.9 on 2020-01-29 06:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import api.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False)),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                 help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                 max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True,
                 max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                 max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                 help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={
                 'unique': 'A user with that email already exists.'}, max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                 related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                 related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False)),
                ('round_time', models.SmallIntegerField(default=10, help_text='seconds', validators=[
                 django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(60)])),
                ('rounds', models.SmallIntegerField(default=1, validators=[
                 django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(5)])),
                ('num_players', models.PositiveSmallIntegerField(validators=[
                 django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(8)])),
                ('status', models.CharField(choices=[('GAP', 'Awaiting Players'), ('GAC', 'Awaiting Czar'), (
                    'GS', 'Game Started'), ('GE', 'Game Ended')], default='GAP', max_length=3)),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.AutoDateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False)),
                ('description', models.CharField(help_text='description allows 2-255 characters(alphabets and -,_,.,\',",space)', max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(
                    5, 'description allows 2-255 characters(alphabets and -,_,.,\',",space)'), django.core.validators.RegexValidator('^[A-Za-z]([\\w+|-|\\s|\\\'|\\"|\\.|!]?)+', 'description allows 2-255 characters(alphabets and -,_,.,\',",space)')])),
                ('credit', models.URLField(blank=True,
                 help_text='credit creator(url)', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False)),
                ('score', models.PositiveSmallIntegerField(default=0)),
                ('czar', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.AutoDateTimeField(auto_now=True)),
                ('game', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='api.Game')),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='genre',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='api.Genre'),
        ),
        migrations.CreateModel(
            name='BlackCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False)),
                ('text', models.CharField(help_text='text allows 5-255 characters(alphabets and -,_,?,\',",space)', max_length=255, validators=[django.core.validators.MinLengthValidator(
                    5, 'text allows 5-255 characters(alphabets and -,_,?,\',",space)'), django.core.validators.RegexValidator('^[A-Za-z]([\\w+|-|\\s|\\\'|\\"|\\?|!]?)+', 'text allows 5-255 characters(alphabets and -,_,?,\',",space)')])),
                ('pick', models.CharField(choices=[
                 ('1', 'pick1'), ('2', 'pick2')], default='1', max_length=5)),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.AutoDateTimeField(auto_now=True)),
                ('genre', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='api.Genre')),
            ],
        ),
        migrations.CreateModel(
            name='WhiteCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False)),
                ('text', models.CharField(help_text='text allows 2-255 characters(alphabets and -,_,.,\',",space)', max_length=255, validators=[django.core.validators.MinLengthValidator(
                    5, 'text allows 2-255 characters(alphabets and -,_,.,\',",space)'), django.core.validators.RegexValidator('^[A-Za-z]([\\w+|-|\\s|\\\'|\\"|\\.|!]?)+', 'text allows 2-255 characters(alphabets and -,_,.,\',",space)')])),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.AutoDateTimeField(auto_now=True)),
                ('genre', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='api.Genre')),
            ],
            options={
                'unique_together': {('text', 'genre')},
            },
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(
                fields=['czar'], name='api_player_czar_394727_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(
                fields=['score'], name='api_player_score_f8b261_idx'),
        ),
        migrations.AddIndex(
            model_name='blackcard',
            index=models.Index(
                fields=['pick'], name='api_blackca_pick_8117e2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blackcard',
            unique_together={('text', 'genre')},
        ),
    ]
