# Generated by Django 3.2.9 on 2021-11-12 07:13

import datetime

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import api.utils.autodatetime
import api.utils.functions
import api.utils.user_manager


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 40 characters or fewer. Letters, digits and @/./+/-/_ only.',
                 max_length=40, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_active', models.BooleanField(default=True,
                 help_text='Active', verbose_name='is active')),
                ('is_staff', models.BooleanField(
                    default=False, help_text='Is Staff')),
                ('is_admin', models.BooleanField(
                    default=False, help_text='Is Admin')),
                ('is_superuser', models.BooleanField(
                    default=False, help_text='Is Superuser')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('verified_at', models.DateTimeField(blank=True,
                 default=None, help_text='Date Verified', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                 related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                 related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', api.utils.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Password',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
                ('password', models.CharField(error_messages={'unique': 'You already used this password.'}, help_text='text allows 5-255 characters(alphabets and -,_,?,\',",space)', max_length=128, unique=True, validators=[django.core.validators.MinLengthValidator(
                    5, 'text allows 5-255 characters(alphabets and -,_,?,\',",space)'), django.core.validators.RegexValidator('^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$', 'text allows 5-255 characters(alphabets and -,_,?,\',",space)')], verbose_name='password')),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('primary', models.BooleanField(default=False)),
                ('email', models.EmailField(error_messages={
                 'unique': 'A user with that email already exists.'}, max_length=254, unique=True)),
                ('provider', models.CharField(choices=[('Twitter', 'Twitter'), ('Google', 'Google'), ('Instagram', 'Instagram'), (
                    'Facebook', 'Facebook'), ('Cah', 'Cah')], default='Cah', help_text='Account Type', max_length=10)),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('join_ends_at', models.DateTimeField(default=api.utils.functions.join_end_default, help_text='seconds', validators=[
                 django.core.validators.MinValueValidator(limit_value=api.utils.functions.join_end_default)])),
                ('round_time', models.SmallIntegerField(default=10, help_text='seconds', validators=[django.core.validators.MinValueValidator(
                    10, message='value should be >= 10 and <= 60'), django.core.validators.MaxValueValidator(60, message='value should be >= 10 and <= 60')])),
                ('rounds', models.SmallIntegerField(default=5, editable=False, help_text='no of game rounds', validators=[django.core.validators.MinValueValidator(
                    5, message='value should be >= 5 and <= 50'), django.core.validators.MaxValueValidator(50, message='value should be >= 5 and <= 50')])),
                ('num_players', models.PositiveSmallIntegerField(default=0, editable=False, help_text='no of players', validators=[django.core.validators.MinValueValidator(
                    0, message='value should be >= 0 and <= 9'), django.core.validators.MaxValueValidator(9, message='value should be >= 0 and <= 9')])),
                ('num_spectators', models.PositiveSmallIntegerField(default=0, editable=False, help_text='no of spectators', validators=[django.core.validators.MinValueValidator(
                    0, message='value should be >= 0 and <= 10'), django.core.validators.MaxValueValidator(10, message='value should be >= 0 and <= 10')])),
                ('status', models.CharField(choices=[('Awaiting Players', 'Gap'), ('Awaiting Czar', 'Gac'), (
                    'Game Started', 'Gs'), ('Game Ended', 'Ge')], default='GAP', max_length=20)),
                ('creator', models.ForeignKey(editable=False,
                 on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='description allows 2-255 characters(alphabets and -,_,.,\',",space)', max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(
                    5, 'description allows 2-255 characters(alphabets and -,_,.,\',",space)'), django.core.validators.RegexValidator('^[A-Za-z]([\\w+|-|\\s|\\\'|\\"|\\.|!]?)+', 'description allows 2-255 characters(alphabets and -,_,.,\',",space)')])),
                ('credit', models.URLField(blank=True,
                 help_text='credit creator(url)', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('first_name', models.CharField(
                    help_text='First Name', max_length=50)),
                ('last_name', models.CharField(help_text='Last Name', max_length=50)),
                ('gender', models.CharField(blank=True, choices=[
                 ('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], help_text='Gender', max_length=6, null=True)),
                ('date_of_birth', models.DateField(
                    blank=True, help_text='Birth Date', null=True)),
                ('conversion_mode', models.CharField(choices=[('Invited', 'Invited'), (
                    'created', 'Created')], default='created', editable=False, help_text='Account Type', max_length=10)),
                ('provider', models.CharField(choices=[('Twitter', 'Twitter'), ('Google', 'Google'), ('Instagram', 'Instagram'), (
                    'Facebook', 'Facebook'), ('Cah', 'Cah')], default='Cah', help_text='Account Type', max_length=10)),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('score', models.PositiveSmallIntegerField(default=0)),
                ('czar', models.BooleanField(default=False)),
                ('game', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='api.game')),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='genres',
            field=models.ManyToManyField(to='api.Genre'),
        ),
        migrations.AddField(
            model_name='game',
            name='winner',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='winners', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BlackCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('text', models.CharField(help_text='text allows 5-255 characters(alphabets and -,_,?,\',",space)', max_length=255, validators=[django.core.validators.MinLengthValidator(
                    5, 'text allows 5-255 characters(alphabets and -,_,?,\',",space)'), django.core.validators.RegexValidator('^[A-Za-z]([\\w+|-|\\s|\\\'|\\"|\\?|!]?)+', 'text allows 5-255 characters(alphabets and -,_,?,\',",space)')])),
                ('pick', models.CharField(choices=[
                 ('1', 'pick1'), ('2', 'pick2')], default='1', max_length=5)),
                ('genre', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='api.genre')),
            ],
        ),
        migrations.CreateModel(
            name='WhiteCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='text allows 2-255 characters(alphabets and -,_,.,\',",space)', max_length=255, validators=[django.core.validators.MinLengthValidator(
                    5, 'text allows 2-255 characters(alphabets and -,_,.,\',",space)'), django.core.validators.RegexValidator('^[A-Za-z]([\\w+|-|\\s|\\\'|\\"|\\.|!]?)+', 'text allows 2-255 characters(alphabets and -,_,.,\',",space)')])),
                ('created_at', models.DateTimeField(
                    default=django.utils.timezone.now, editable=False)),
                ('updated_at', api.utils.autodatetime.AutoDateTimeField(auto_now=True)),
                ('genre', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='api.genre')),
            ],
            options={
                'unique_together': {('text', 'genre')},
            },
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(
                fields=['czar'], name='api_player_czar_394727_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(
                fields=['score'], name='api_player_score_f8b261_idx'),
        ),
        migrations.AddIndex(
            model_name='blackcard',
            index=models.Index(
                fields=['pick'], name='api_blackca_pick_8117e2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blackcard',
            unique_together={('text', 'genre')},
        ),
    ]
