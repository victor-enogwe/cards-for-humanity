schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AnswerNode implements Node {
  card: WhiteCardNode!
  createdAt: DateTime!
  game: GameNode!
  """The ID of the object."""
  id: ID!
  player: PlayerNode!
  question: QuestionNode!
  rating: ApiAnswerRatingChoices!
  """game round"""
  round: Int!
  updatedAt: DateTime!
}

type AnswerNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [AnswerNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `AnswerNode` and its cursor."""
type AnswerNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: AnswerNode
}

"""An enumeration."""
enum ApiAnswerRatingChoices {
  """Bad"""
  BAD
  """Like"""
  LIKE
  """Love"""
  LOVE
  """Meh"""
  MEH
  """Normal"""
  NORMAL
}

"""An enumeration."""
enum ApiBlackCardPickChoices {
  """Pick One"""
  PICK_ONE
  """Pick Three"""
  PICK_THREE
  """Pick Two"""
  PICK_TWO
}

"""An enumeration."""
enum ApiGameStatusChoices {
  """Awaiting Answers"""
  GAA
  """Awaiting Czar"""
  GAC
  """Awaiting Players"""
  GAP
  """Game Canceled"""
  GC
  """Game Ended"""
  GE
  """Game Started"""
  GS
}

"""An enumeration."""
enum ApiPlayerAvatarChoices {
  """abby"""
  ABBY
  """alfred"""
  ALFRED
  """andina"""
  ANDINA
  """astro"""
  ASTRO
  """camile"""
  CAMILE
  """dorothy"""
  DOROTHY
  """dudai"""
  DUDAI
  """eduardo"""
  EDUARDO
  """general"""
  GENERAL
  """grace"""
  GRACE
  """iranir"""
  IRANIR
  """jennifer"""
  JENNIFER
  """labrat"""
  LABRAT
  """luther"""
  LUTHER
  """rainbowness"""
  RAINBOWNESS
  """shin"""
  SHIN
}

"""An enumeration."""
enum ApiProfileAvatarChoices {
  """abby"""
  ABBY
  """alfred"""
  ALFRED
  """andina"""
  ANDINA
  """astro"""
  ASTRO
  """camile"""
  CAMILE
  """dorothy"""
  DOROTHY
  """dudai"""
  DUDAI
  """eduardo"""
  EDUARDO
  """general"""
  GENERAL
  """grace"""
  GRACE
  """iranir"""
  IRANIR
  """jennifer"""
  JENNIFER
  """labrat"""
  LABRAT
  """luther"""
  LUTHER
  """rainbowness"""
  RAINBOWNESS
  """shin"""
  SHIN
}

"""An enumeration."""
enum ApiProfileGenderChoices {
  """Female"""
  FEMALE
  """Male"""
  MALE
  """Other"""
  OTHER
}

"""An enumeration."""
enum ApiProviderConversionModeChoices {
  """Created"""
  CREATED
  """Invited"""
  INVITED
  """Superuser"""
  SUPERUSER
}

"""An enumeration."""
enum ApiProviderProviderChoices {
  """Email"""
  EMAIL
  """Facebook"""
  FACEBOOK
  """Google"""
  GOOGLE
  """Instagram"""
  INSTAGRAM
  """Twitter"""
  TWITTER
}

"""An enumeration."""
enum ApiQuestionRatingChoices {
  """Bad"""
  BAD
  """Like"""
  LIKE
  """Love"""
  LOVE
  """Meh"""
  MEH
  """Normal"""
  NORMAL
}

type AvailableAnswerNode implements Node {
  card: WhiteCardNode!
  createdAt: DateTime!
  game: GameNode!
  """The ID of the object."""
  id: ID!
  """game round"""
  round: Int!
  updatedAt: DateTime!
}

type AvailableAnswerNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [AvailableAnswerNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `AvailableAnswerNode` and its cursor."""
type AvailableAnswerNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: AvailableAnswerNode
}

type AvailableQuestionNode implements Node {
  card: BlackCardNode!
  createdAt: DateTime!
  game: GameNode!
  """The ID of the object."""
  id: ID!
  """game round"""
  round: Int!
  updatedAt: DateTime!
}

type AvailableQuestionNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [AvailableQuestionNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `AvailableQuestionNode` and its cursor."""
type AvailableQuestionNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: AvailableQuestionNode
}

input BatchCreateInviteInput {
  email: String!
  game: ID!
  revoked: Boolean
  spectator: Boolean
}

type BlackCardNode implements Node {
  availablequestionSet(after: String, before: String, card: ID, createdAt: DateTime, first: Int, game: ID, last: Int, offset: Int, round: Int, updatedAt: DateTime): AvailableQuestionNodeConnection!
  createdAt: DateTime!
  genre: GenreNode!
  """The ID of the object."""
  id: ID!
  pick: ApiBlackCardPickChoices!
  questionSet(after: String, before: String, card: ID, createdAt: DateTime, first: Int, game: ID, last: Int, offset: Int, player: ID, rating: String, round: Int, updatedAt: DateTime): QuestionNodeConnection!
  rating: CardRating
  """text allows 2-255 characters(alphabets and -,_,.,',",space)"""
  text: String!
  updatedAt: DateTime!
}

type BlackCardNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [BlackCardNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `BlackCardNode` and its cursor."""
type BlackCardNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: BlackCardNode
}

enum CardRating {
  BAD
  LIKE
  LOVE
  MEH
  NORMAL
}

input CreateGameInput {
  answerSet: [ID]
  availableanswerSet: [ID]
  availablequestionSet: [ID]
  genres: [ID]!
  """seconds"""
  joinEndsAt: DateTime
  """no of players"""
  numPlayers: Int
  """no of spectators"""
  numSpectators: Int
  playerSetAdd: [CreateGameInputAddGamePlayerset]
  private: Boolean
  questionSet: [ID]
  """game round"""
  round: Int
  """seconds"""
  roundTime: Int
  """no of game rounds"""
  rounds: Int
  task: ID
}

input CreateGameInputAddGamePlayerset {
  answerSet: [ID]
  avatar: ApiPlayerAvatarChoices
  questionSet: [ID]
  spectator: Boolean
  user: ID!
  winner: [ID]
}

type CreateGameMutation {
  game: GameNode
}

input CreateGameMutationInput {
  avatar: ApiPlayerAvatarChoices!
  genres: [ID]!
  joinEndsAt: DateTime!
  numPlayers: Int!
  numSpectators: Int!
  roundTime: Int!
  rounds: Int!
  status: String!
}

type CreateNewGameMutation {
  newGame: NewGameNode
}

type CreateUserMutation {
  ok: Boolean
}

input CreateUserMutationInput {
  email: String!
  password: String!
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteRefreshTokenCookieInput {
  clientMutationId: String
}

type DeleteRefreshTokenCookiePayload {
  clientMutationId: String
  deleted: Boolean!
}

type GameInProgressSubscription {
  gameInProgress: GameNode
}

type GameInviteMutation {
  invites: [InviteNode]
}

type GameNode implements Node {
  answers: [WhiteCardNode]
  availableAnswers: [WhiteCardNode]
  availableQuestions: [BlackCardNode]
  createdAt: DateTime!
  creator: UserNode!
  genres(after: String, before: String, credit: String, credit_Icontains: String, credit_Istartswith: String, description: String, description_Icontains: String, description_Istartswith: String, first: Int, id: Float, id_Gt: Float, id_Lt: Float, last: Int, offset: Int): GenreNodeConnection!
  """The ID of the object."""
  id: ID!
  inviteSet(after: String, before: String, createdAt: DateTime, email: String, first: Int, game: ID, last: Int, offset: Int, revoked: Boolean, spectator: Boolean, updatedAt: DateTime): InviteNodeConnection!
  """seconds"""
  joinEndsAt: DateTime!
  """no of players"""
  numPlayers: Int!
  """no of spectators"""
  numSpectators: Int!
  playerSet(after: String, avatar: String, before: String, createdAt: DateTime, czar: Boolean, first: Int, game: ID, last: Int, offset: Int, score: Int, spectator: Boolean, updatedAt: DateTime, user: ID): PlayerNodeConnection!
  private: Boolean!
  question: BlackCardNode
  """game round"""
  round: Int!
  """seconds"""
  roundTime: Int!
  """no of game rounds"""
  rounds: Int!
  status: ApiGameStatusChoices!
  updatedAt: DateTime!
  winner: PlayerNode
}

type GameNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [GameNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `GameNode` and its cursor."""
type GameNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: GameNode
}

type GamePrivacyMutation {
  game: GameNode
}

type GameStatusMutation {
  game: GameNode
}

type GenreNode implements Node {
  blackcardSet(after: String, before: String, createdAt: DateTime, first: Int, genre: ID, last: Int, offset: Int, pick: String, text: String, updatedAt: DateTime): BlackCardNodeConnection!
  """credit creator(url)"""
  credit: String
  """text allows 2-255 characters(alphabets and -,_,.,',",space)"""
  description: String!
  gameSet(after: String, before: String, createdAt: DateTime, creator: ID, first: Int, genres: [ID], joinEndsAt: DateTime, last: Int, numPlayers: Int, numSpectators: Int, offset: Int, private: Boolean, round: Int, roundTime: Int, rounds: Int, status: String, task: ID, updatedAt: DateTime, winner: ID): GameNodeConnection!
  """The ID of the object."""
  id: ID!
  selected: Boolean
  whitecardSet(after: String, before: String, first: Int, genre: ID, last: Int, offset: Int, text: String, text_Icontains: String, text_Istartswith: String): WhiteCardNodeConnection!
}

type GenreNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [GenreNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `GenreNode` and its cursor."""
type GenreNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: GenreNode
}

type InviteNode implements Node {
  createdAt: DateTime!
  email: String!
  game: GameNode!
  """The ID of the object."""
  id: ID!
  revoked: Boolean!
  spectator: Boolean!
  updatedAt: DateTime!
}

type InviteNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [InviteNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `InviteNode` and its cursor."""
type InviteNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: InviteNode
}

input InvitedGameInput {
  email: String!
  id: ID!
}

type JWTPayloadNode {
  aud: String
  avatar: String
  email: String
  emailVerified: Boolean
  exp: Int
  iat: Int
  iss: String
  jti: String
  name: String
  nbf: Int
  provider: String
  sub: String
  username: String
}

type JoinGameMutation {
  game: GameNode
  ok: Boolean
}

input JoinGameMutationInput {
  avatar: String!
  game: ID!
  spectator: Boolean
}

"""Root Mutation for the cards against humanity api."""
type Mutation {
  createGame(input: CreateGameInput!): CreateGameMutation
  createNewGame(input: CreateGameMutationInput!): CreateNewGameMutation
  createUser(input: CreateUserMutationInput!): CreateUserMutation
  deleteRefreshTokenCookie(input: DeleteRefreshTokenCookieInput!): DeleteRefreshTokenCookiePayload
  gameInvitation(input: [BatchCreateInviteInput]!): GameInviteMutation
  gamePrivacy(id: ID!, input: UpdateGamePrivacyInput!): GamePrivacyMutation
  gameStatus(id: ID!, input: UpdateGameStatusInput!): GameStatusMutation
  joinGame(input: JoinGameMutationInput!): JoinGameMutation
  refreshToken(input: RefreshTokenMutationInput!): RefreshTokenMutationPayload
  revokeRefreshToken(input: RevokeInput!): RevokePayload
  roundQuestion(input: RoundQuestionMutationInput!): RoundQuestionMutation
  setFullWidth(input: SetFullWidthMutationInput!): SetFullWidthMutation
  """Social Auth for JSON Web Token (JWT)"""
  socialAuth(input: SocialAuthJWTInput!): SocialAuthJWTPayload
  toggleNav: ToggleNavMutation
  tokenAuth(input: ObtainJSONWebTokenMutationInput!): ObtainJSONWebTokenMutationPayload
}

type NewGameNode {
  avatar: ApiPlayerAvatarChoices!
  genres: [ID]!
  id: ID!
  joinEndsAt: DateTime!
  numPlayers: Int!
  numSpectators: Int!
  roundTime: Int!
  rounds: Int!
  status: String!
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type NotificationNode {
  id: ID!
  """find game invites"""
  invites(after: String, before: String, email: String, first: Int, last: Int, offset: Int, revoked: Boolean): InviteNodeConnection
}

type NotificationSubscription {
  message: String
  room: ID
  sender: ID
}

input ObtainJSONWebTokenMutationInput {
  clientMutationId: String
  password: String!
  username: String!
}

type ObtainJSONWebTokenMutationPayload {
  clientMutationId: String
  payload: JWTPayloadNode
  refreshExpiresIn: Int!
  refreshToken: String!
  token: String!
}

"""The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PlayerNode implements Node {
  answerSet(after: String, before: String, card: ID, createdAt: DateTime, first: Int, game: ID, last: Int, offset: Int, player: ID, question: ID, rating: String, round: Int, updatedAt: DateTime): AnswerNodeConnection!
  avatar: ApiPlayerAvatarChoices!
  createdAt: DateTime!
  czar: Boolean!
  game: GameNode!
  """The ID of the object."""
  id: ID!
  questionSet(after: String, before: String, card: ID, createdAt: DateTime, first: Int, game: ID, last: Int, offset: Int, player: ID, rating: String, round: Int, updatedAt: DateTime): QuestionNodeConnection!
  score: Int!
  spectator: Boolean!
  updatedAt: DateTime!
  user: UserNode!
  winner(after: String, before: String, createdAt: DateTime, creator: ID, first: Int, genres: [ID], joinEndsAt: DateTime, last: Int, numPlayers: Int, numSpectators: Int, offset: Int, private: Boolean, round: Int, roundTime: Int, rounds: Int, status: String, task: ID, updatedAt: DateTime, winner: ID): GameNodeConnection!
}

type PlayerNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [PlayerNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `PlayerNode` and its cursor."""
type PlayerNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: PlayerNode
}

type ProfileNode implements Node {
  avatar: ApiProfileAvatarChoices
  createdAt: DateTime!
  """Birth Date"""
  dateOfBirth: Date
  """First Name"""
  firstName: String!
  """Gender"""
  gender: ApiProfileGenderChoices
  """The ID of the object."""
  id: ID!
  """Last Name"""
  lastName: String!
  provider: ProviderNode!
  updatedAt: DateTime!
  """Required. 40 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
}

type ProviderNode implements Node {
  """Account Type"""
  conversionMode: ApiProviderConversionModeChoices!
  createdAt: DateTime!
  email: String!
  """The ID of the object."""
  id: ID!
  lastLogin: DateTime
  lastLogout: DateTime
  phone: String
  primary: Boolean!
  profile: ProfileNode
  """Account Type"""
  provider: ApiProviderProviderChoices!
  seed: String
  updatedAt: DateTime!
  user: UserNode!
  """Date Verified"""
  verifiedAt: DateTime
}

type ProviderNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [ProviderNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `ProviderNode` and its cursor."""
type ProviderNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: ProviderNode
}

"""Root Query for the cards against humanity api."""
type Query {
  blackCards(after: String, before: String, createdAt: DateTime, first: Int, genre: ID, last: Int, offset: Int, pick: String, text: String, updatedAt: DateTime): BlackCardNodeConnection
  """
  @client
   page is full width
  """
  fullWidth: Boolean
  gameInProgress: GameNode
  """find games"""
  games(after: String, before: String, createdAt: DateTime, creator: ID, first: Int, genres: [ID], joinEndsAt: DateTime, last: Int, numPlayers: Int, numSpectators: Int, offset: Int, private: Boolean, round: Int, roundTime: Int, rounds: Int, status: String, task: ID, updatedAt: DateTime, winner: ID): GameNodeConnection
  """all cards genre"""
  genres(after: String, before: String, credit: String, credit_Icontains: String, credit_Istartswith: String, description: String, description_Icontains: String, description_Istartswith: String, first: Int, id: Float, id_Gt: Float, id_Lt: Float, last: Int, offset: Int): GenreNodeConnection
  invitedGame(input: InvitedGameInput!): GameNode
  """
  @client
   navigation sidebar open
  """
  navOpen: Boolean
  newGame(id: ID!): NewGameNode
  notifications: NotificationNode
  """find users"""
  users(after: String, before: String, createdAt: DateTime, first: Int, groups: [ID], isActive: Boolean, isAdmin: Boolean, isStaff: Boolean, isSuperuser: Boolean, last: Int, offset: Int, updatedAt: DateTime, userPermissions: [ID]): UserNodeConnection
  whiteCards(after: String, before: String, first: Int, genre: ID, last: Int, offset: Int, text: String, text_Icontains: String, text_Istartswith: String): WhiteCardNodeConnection
}

type QuestionNode implements Node {
  answerSet(after: String, before: String, card: ID, createdAt: DateTime, first: Int, game: ID, last: Int, offset: Int, player: ID, question: ID, rating: String, round: Int, updatedAt: DateTime): AnswerNodeConnection!
  card: BlackCardNode!
  createdAt: DateTime!
  game: GameNode!
  """The ID of the object."""
  id: ID!
  player: PlayerNode!
  rating: ApiQuestionRatingChoices!
  """game round"""
  round: Int!
  updatedAt: DateTime!
}

type QuestionNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [QuestionNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `QuestionNode` and its cursor."""
type QuestionNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: QuestionNode
}

input RefreshTokenMutationInput {
  clientMutationId: String
  refreshToken: String
}

type RefreshTokenMutationPayload {
  clientMutationId: String
  payload: JWTPayloadNode
  refreshExpiresIn: Int!
  refreshToken: String!
  token: String!
}

input RevokeInput {
  clientMutationId: String
  refreshToken: String
}

type RevokePayload {
  clientMutationId: String
  revoked: Int!
}

type RoundQuestionMutation {
  ok: Boolean
}

input RoundQuestionMutationInput {
  card: ID!
  game: ID!
  player: ID!
  rating: CardRating!
  round: Int!
}

type SetFullWidthMutation {
  fullWidth: Boolean
}

input SetFullWidthMutationInput {
  fullWidth: Boolean!
}

input SocialAuthJWTInput {
  accessToken: String!
  clientMutationId: String
  provider: String!
}

"""Social Auth for JSON Web Token (JWT)"""
type SocialAuthJWTPayload {
  clientMutationId: String
  social: SocialNode
  token: String
}

scalar SocialCamelJSON

type SocialNode implements Node {
  created: DateTime!
  extraData: SocialCamelJSON
  """The ID of the object."""
  id: ID!
  modified: DateTime!
  provider: String!
  uid: String!
  user: UserNode!
}

type SocialNodeConnection {
  """Contains the nodes in this connection."""
  edges: [SocialNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
}

"""A Relay edge containing a `SocialNode` and its cursor."""
type SocialNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: SocialNode
}

"""Root Subscription for the cards against humanity api."""
type Subscription {
  gameInProgress: GameInProgressSubscription
  notifications(message: String!, room: ID!, sender: ID!): NotificationSubscription
}

type ToggleNavMutation {
  navOpen: Boolean
}

input UpdateGamePrivacyInput {
  private: Boolean!
}

input UpdateGameStatusInput {
  status: ApiGameStatusChoices!
}

type UserNode implements Node {
  createdAt: DateTime!
  gameSet(after: String, before: String, createdAt: DateTime, creator: ID, first: Int, genres: [ID], joinEndsAt: DateTime, last: Int, numPlayers: Int, numSpectators: Int, offset: Int, private: Boolean, round: Int, roundTime: Int, rounds: Int, status: String, task: ID, updatedAt: DateTime, winner: ID): GameNodeConnection!
  """The ID of the object."""
  id: ID!
  """Active"""
  isActive: Boolean!
  """Is Admin"""
  isAdmin: Boolean!
  """Is Staff"""
  isStaff: Boolean!
  """Is Superuser"""
  isSuperuser: Boolean!
  playerSet(after: String, avatar: String, before: String, createdAt: DateTime, czar: Boolean, first: Int, game: ID, last: Int, offset: Int, score: Int, spectator: Boolean, updatedAt: DateTime, user: ID): PlayerNodeConnection!
  providerSet(after: String, before: String, conversionMode: String, createdAt: DateTime, email: String, first: Int, last: Int, lastLogin: DateTime, lastLogout: DateTime, offset: Int, phone: String, primary: Boolean, provider: String, seed: String, updatedAt: DateTime, user: ID, verifiedAt: DateTime): ProviderNodeConnection!
  socialAuth(after: String, before: String, first: Int, last: Int, offset: Int, provider: String, provider_In: [String], uid: String, uid_In: [String]): SocialNodeConnection!
  updatedAt: DateTime!
}

type UserNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [UserNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `UserNode` and its cursor."""
type UserNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: UserNode
}

type WhiteCardNode implements Node {
  answerSet(after: String, before: String, card: ID, createdAt: DateTime, first: Int, game: ID, last: Int, offset: Int, player: ID, question: ID, rating: String, round: Int, updatedAt: DateTime): AnswerNodeConnection!
  availableanswerSet(after: String, before: String, card: ID, createdAt: DateTime, first: Int, game: ID, last: Int, offset: Int, round: Int, updatedAt: DateTime): AvailableAnswerNodeConnection!
  createdAt: DateTime!
  genre: GenreNode!
  """The ID of the object."""
  id: ID!
  rating: CardRating
  """text allows 2-255 characters(alphabets and -,_,.,',",space)"""
  text: String!
  updatedAt: DateTime!
}

type WhiteCardNodeConnection {
  edgeCount: Int
  """Contains the nodes in this connection."""
  edges: [WhiteCardNodeEdge]!
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  totalCount: Int
}

"""A Relay edge containing a `WhiteCardNode` and its cursor."""
type WhiteCardNodeEdge {
  """A cursor for use in pagination"""
  cursor: String!
  """The item at the end of the edge"""
  node: WhiteCardNode
}
