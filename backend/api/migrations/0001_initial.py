# Generated by Django 3.2.10 on 2021-12-31 20:18

import uuid

import api.utils.autodatetime
import api.utils.functions
import api.utils.user_manager
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import pgtrigger.core
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("django_celery_beat", "0015_edit_solarschedule_events_choices"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Active", verbose_name="is active"
                    ),
                ),
                ("is_staff", models.BooleanField(default=False, help_text="Is Staff")),
                ("is_admin", models.BooleanField(default=False, help_text="Is Admin")),
                (
                    "is_superuser",
                    models.BooleanField(default=False, help_text="Is Superuser"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", api.utils.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BlackCard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "text",
                    models.CharField(
                        help_text="text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                5,
                                "text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                            ),
                            django.core.validators.RegexValidator(
                                "^[A-Za-z]([\\w+|-|\\s|\\'|\\\"|\\.|!]?)+",
                                "text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                            ),
                        ],
                    ),
                ),
                (
                    "pick",
                    models.CharField(
                        choices=[
                            ("Pick One", "PICK_ONE"),
                            ("Pick Three", "PICK_THREE"),
                            ("Pick Two", "PICK_TWO"),
                        ],
                        default="Pick One",
                        max_length=10,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                ("private", models.BooleanField(default=True)),
                (
                    "join_ends_at",
                    models.DateTimeField(
                        default=api.utils.functions.join_end_default,
                        help_text="seconds",
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=api.utils.functions.join_end_default
                            )
                        ],
                    ),
                ),
                (
                    "round_time",
                    models.SmallIntegerField(
                        default=10,
                        help_text="seconds",
                        validators=[
                            django.core.validators.MinValueValidator(
                                10, message="value should be >= 10 and <= 60"
                            ),
                            django.core.validators.MaxValueValidator(
                                60, message="value should be >= 10 and <= 60"
                            ),
                        ],
                    ),
                ),
                (
                    "rounds",
                    models.SmallIntegerField(
                        default=5,
                        editable=False,
                        help_text="no of game rounds",
                        validators=[
                            django.core.validators.MinValueValidator(
                                5, message="value should be >= 5 and <= 50"
                            ),
                            django.core.validators.MaxValueValidator(
                                50, message="value should be >= 5 and <= 50"
                            ),
                        ],
                    ),
                ),
                (
                    "round",
                    models.SmallIntegerField(
                        default=0,
                        editable=False,
                        help_text="game round",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="value should be >= 1 and <= 50"
                            ),
                            django.core.validators.MaxValueValidator(
                                50, message="value should be >= 1 and <= 50"
                            ),
                        ],
                    ),
                ),
                (
                    "num_players",
                    models.PositiveSmallIntegerField(
                        default=1,
                        editable=False,
                        help_text="no of players",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="value should be >= 1 and <= 9"
                            ),
                            django.core.validators.MaxValueValidator(
                                9, message="value should be >= 1 and <= 9"
                            ),
                        ],
                    ),
                ),
                (
                    "num_spectators",
                    models.PositiveSmallIntegerField(
                        default=0,
                        editable=False,
                        help_text="no of spectators",
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, message="value should be >= 0 and <= 10"
                            ),
                            django.core.validators.MaxValueValidator(
                                10, message="value should be >= 0 and <= 10"
                            ),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Awaiting Answers", "GAA"),
                            ("Awaiting Czar", "GAC"),
                            ("Awaiting Players", "GAP"),
                            ("Game Canceled", "GC"),
                            ("Game Ended", "GE"),
                            ("Game Started", "GS"),
                        ],
                        default="Awaiting Players",
                        max_length=20,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="game_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                5,
                                "text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                            ),
                            django.core.validators.RegexValidator(
                                "^[A-Za-z]([\\w+|-|\\s|\\'|\\\"|\\.|!]?)+",
                                "text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                            ),
                        ],
                    ),
                ),
                (
                    "credit",
                    models.URLField(
                        blank=True, help_text="credit creator(url)", null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                ("score", models.PositiveSmallIntegerField(default=0)),
                ("czar", models.BooleanField(default=False)),
                ("spectator", models.BooleanField(default=False)),
                (
                    "avatar",
                    models.CharField(
                        choices=[
                            ("abby", "ABBY"),
                            ("alfred", "ALFRED"),
                            ("andina", "ANDINA"),
                            ("astro", "ASTRO"),
                            ("camile", "CAMILE"),
                            ("dorothy", "DOROTHY"),
                            ("dudai", "DUDAI"),
                            ("eduardo", "EDUARDO"),
                            ("general", "GENERAL"),
                            ("grace", "GRACE"),
                            ("iranir", "IRANIR"),
                            ("jennifer", "JENNIFER"),
                            ("labrat", "LABRAT"),
                            ("luther", "LUTHER"),
                            ("rainbowness", "RAINBOWNESS"),
                            ("shin", "SHIN"),
                        ],
                        default="dorothy",
                        max_length=20,
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_set",
                        to="api.game",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Provider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "last_logout",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last logout"
                    ),
                ),
                ("primary", models.BooleanField(default=False)),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email",
                    ),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        error_messages={
                            "unique": "A user with that phone number already exists."
                        },
                        max_length=128,
                        null=True,
                        region=None,
                        unique=True,
                        verbose_name="phone",
                    ),
                ),
                (
                    "seed",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        unique=True,
                        verbose_name="token seed",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("Email", "EMAIL"),
                            ("Facebook", "FACEBOOK"),
                            ("Google", "GOOGLE"),
                            ("Instagram", "INSTAGRAM"),
                            ("Twitter", "TWITTER"),
                        ],
                        default="Email",
                        help_text="Account Type",
                        max_length=10,
                    ),
                ),
                (
                    "conversion_mode",
                    models.CharField(
                        choices=[
                            ("Created", "CREATED"),
                            ("Invited", "INVITED"),
                            ("Superuser", "SUPERUSER"),
                        ],
                        default="Created",
                        editable=False,
                        help_text="Account Type",
                        max_length=10,
                    ),
                ),
                (
                    "verified_at",
                    models.DateTimeField(
                        blank=True, default=None, help_text="Date Verified", null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WhiteCard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "text",
                    models.CharField(
                        help_text="text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                5,
                                "text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                            ),
                            django.core.validators.RegexValidator(
                                "^[A-Za-z]([\\w+|-|\\s|\\'|\\\"|\\.|!]?)+",
                                "text allows 2-255 characters(alphabets and -,_,.,',\",space)",
                            ),
                        ],
                    ),
                ),
                (
                    "genre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.genre"
                    ),
                ),
            ],
            options={
                "ordering": ["text"],
                "abstract": False,
                "unique_together": {("text", "genre")},
            },
        ),
        migrations.CreateModel(
            name="VerificationCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "code",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="verification code",
                        unique=True,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        editable=False,
                        help_text="code expiry datetime",
                        validators=[
                            django.core.validators.MinValueValidator(
                                limit_value=api.utils.functions.expiry_date_min
                            )
                        ],
                    ),
                ),
                (
                    "previous",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="api.verificationcode",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.provider",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "rating",
                    models.CharField(
                        choices=[
                            ("Bad", "BAD"),
                            ("Like", "LIKE"),
                            ("Love", "LOVE"),
                            ("Meh", "MEH"),
                            ("Normal", "NORMAL"),
                        ],
                        default="Normal",
                        max_length=6,
                    ),
                ),
                (
                    "round",
                    models.SmallIntegerField(
                        default=0,
                        editable=False,
                        help_text="game round",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="value should be >= 1 and <= 50"
                            ),
                            django.core.validators.MaxValueValidator(
                                50, message="value should be >= 1 and <= 50"
                            ),
                        ],
                    ),
                ),
                (
                    "card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.blackcard"
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.game"
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.player"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                ("first_name", models.CharField(help_text="First Name", max_length=50)),
                ("last_name", models.CharField(help_text="Last Name", max_length=50)),
                (
                    "username",
                    models.CharField(
                        help_text="Required. 40 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=40,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "avatar",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("abby", "ABBY"),
                            ("alfred", "ALFRED"),
                            ("andina", "ANDINA"),
                            ("astro", "ASTRO"),
                            ("camile", "CAMILE"),
                            ("dorothy", "DOROTHY"),
                            ("dudai", "DUDAI"),
                            ("eduardo", "EDUARDO"),
                            ("general", "GENERAL"),
                            ("grace", "GRACE"),
                            ("iranir", "IRANIR"),
                            ("jennifer", "JENNIFER"),
                            ("labrat", "LABRAT"),
                            ("luther", "LUTHER"),
                            ("rainbowness", "RAINBOWNESS"),
                            ("shin", "SHIN"),
                        ],
                        default=None,
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Female", "FEMALE"),
                            ("Male", "MALE"),
                            ("Other", "OTHER"),
                        ],
                        help_text="Gender",
                        max_length=6,
                        null=True,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(blank=True, help_text="Birth Date", null=True),
                ),
                (
                    "provider",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="api.provider"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Password",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                ("is_active", models.BooleanField(default=False)),
                (
                    "password",
                    models.CharField(
                        error_messages={"unique": "You already used this password."},
                        help_text="password must have a minimum of 8 characters\npassword must have a maximum of 30 characters\npassword must have an uppercase character\npassword must have a lowercase character\npassword must have a numeric character\npassword must have a special characters",
                        max_length=128,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$",
                                "password must have a minimum of 8 characters\npassword must have a maximum of 30 characters\npassword must have an uppercase character\npassword must have a lowercase character\npassword must have a numeric character\npassword must have a special characters",
                            )
                        ],
                        verbose_name="password",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Invite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                ("spectator", models.BooleanField(default=False)),
                ("revoked", models.BooleanField(default=False)),
                ("email", models.EmailField(max_length=254, verbose_name="email")),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.game"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="game",
            name="genres",
            field=models.ManyToManyField(to="api.Genre"),
        ),
        migrations.AddField(
            model_name="game",
            name="task",
            field=models.OneToOneField(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="django_celery_beat.periodictask",
            ),
        ),
        migrations.AddField(
            model_name="game",
            name="winner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="winner",
                to="api.player",
            ),
        ),
        migrations.AddField(
            model_name="blackcard",
            name="genre",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.genre"
            ),
        ),
        migrations.CreateModel(
            name="AvailableQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "round",
                    models.SmallIntegerField(
                        default=0,
                        editable=False,
                        help_text="game round",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="value should be >= 1 and <= 50"
                            ),
                            django.core.validators.MaxValueValidator(
                                50, message="value should be >= 1 and <= 50"
                            ),
                        ],
                    ),
                ),
                (
                    "card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.blackcard"
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.game"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AvailableAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "round",
                    models.SmallIntegerField(
                        default=0,
                        editable=False,
                        help_text="game round",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="value should be >= 1 and <= 50"
                            ),
                            django.core.validators.MaxValueValidator(
                                50, message="value should be >= 1 and <= 50"
                            ),
                        ],
                    ),
                ),
                (
                    "card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.whitecard"
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.game"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "updated_at",
                    api.utils.autodatetime.AutoDateTimeField(editable=False),
                ),
                (
                    "rating",
                    models.CharField(
                        choices=[
                            ("Bad", "BAD"),
                            ("Like", "LIKE"),
                            ("Love", "LOVE"),
                            ("Meh", "MEH"),
                            ("Normal", "NORMAL"),
                        ],
                        default="Normal",
                        max_length=6,
                    ),
                ),
                (
                    "round",
                    models.SmallIntegerField(
                        default=0,
                        editable=False,
                        help_text="game round",
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, message="value should be >= 1 and <= 50"
                            ),
                            django.core.validators.MaxValueValidator(
                                50, message="value should be >= 1 and <= 50"
                            ),
                        ],
                    ),
                ),
                (
                    "card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.whitecard"
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.game"
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.player"
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.question"
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="question",
            constraint=models.UniqueConstraint(
                fields=("game", "card", "round"),
                name="unique_question_player_game_round",
            ),
        ),
        migrations.AddIndex(
            model_name="player",
            index=models.Index(fields=["czar"], name="api_player_czar_394727_idx"),
        ),
        migrations.AddIndex(
            model_name="player",
            index=models.Index(fields=["score"], name="api_player_score_f8b261_idx"),
        ),
        migrations.AddConstraint(
            model_name="player",
            constraint=models.UniqueConstraint(
                fields=("user", "game"), name="unique_player_game"
            ),
        ),
        migrations.AddConstraint(
            model_name="player",
            constraint=models.UniqueConstraint(
                condition=models.Q(("czar", True)),
                fields=("game",),
                name="unique_player_game_czar",
            ),
        ),
        migrations.AddConstraint(
            model_name="player",
            constraint=models.UniqueConstraint(
                fields=("game", "avatar"), name="unique_player_game_avatar"
            ),
        ),
        migrations.AddConstraint(
            model_name="invite",
            constraint=models.UniqueConstraint(
                fields=("game", "email"), name="unique_uid_invite_game"
            ),
        ),
        migrations.AddConstraint(
            model_name="game",
            constraint=models.UniqueConstraint(
                condition=pgtrigger.core.Q(("status", "Awaiting Players")),
                fields=("creator",),
                name="unique_game_status",
            ),
        ),
        migrations.AddIndex(
            model_name="blackcard",
            index=models.Index(fields=["pick"], name="api_blackca_pick_8117e2_idx"),
        ),
        migrations.AddConstraint(
            model_name="availablequestion",
            constraint=models.UniqueConstraint(
                fields=("game", "card", "round"),
                name="unique_available_question_player_game_round",
            ),
        ),
        migrations.AddConstraint(
            model_name="availableanswer",
            constraint=models.UniqueConstraint(
                fields=("game", "card", "round"),
                name="unique_available_answer_player_game_round",
            ),
        ),
        migrations.AddConstraint(
            model_name="answer",
            constraint=models.UniqueConstraint(
                fields=("game", "card", "round"), name="unique_answer_player_game_round"
            ),
        ),
    ]
